<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dmm.mapper.TaskJobMapper">
  <resultMap id="BaseResultMap" type="com.dmm.entry.TaskJob">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="type" jdbcType="INTEGER" property="type" />
    <result column="cron" jdbcType="VARCHAR" property="cron" />
    <result column="interval_time" jdbcType="INTEGER" property="intervalTime" />
    <result column="job_name" jdbcType="VARCHAR" property="jobName" />
    <result column="job_class_name" jdbcType="VARCHAR" property="jobClassName" />
    <result column="job_description" jdbcType="VARCHAR" property="jobDescription" />
    <result column="job_number" jdbcType="VARCHAR" property="jobNumber" />
    <result column="status" jdbcType="TINYINT" property="status" />
    <result column="create_time" jdbcType="BIGINT" property="createTime" />
    <result column="update_time" jdbcType="BIGINT" property="updateTime" />
    <result column="state" jdbcType="TINYINT" property="state" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, type, cron, interval_time, job_name, job_class_name, job_description, job_number, 
    status, create_time, update_time, state
  </sql>
  <select id="selectByExample" parameterType="com.dmm.entry.TaskJobExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from task_job
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from task_job
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from task_job
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.dmm.entry.TaskJobExample">
    delete from task_job
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.dmm.entry.TaskJob">
    insert into task_job (id, type, cron, 
      interval_time, job_name, job_class_name, 
      job_description, job_number, status, 
      create_time, update_time, state
      )
    values (#{id,jdbcType=BIGINT}, #{type,jdbcType=INTEGER}, #{cron,jdbcType=VARCHAR}, 
      #{intervalTime,jdbcType=INTEGER}, #{jobName,jdbcType=VARCHAR}, #{jobClassName,jdbcType=VARCHAR}, 
      #{jobDescription,jdbcType=VARCHAR}, #{jobNumber,jdbcType=VARCHAR}, #{status,jdbcType=TINYINT}, 
      #{createTime,jdbcType=BIGINT}, #{updateTime,jdbcType=BIGINT}, #{state,jdbcType=TINYINT}
      )

      <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
        SELECT LAST_INSERT_ID() as id
      </selectKey>
  </insert>
  <insert id="insertSelective" parameterType="com.dmm.entry.TaskJob">
    insert into task_job
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="type != null">
        type,
      </if>
      <if test="cron != null">
        cron,
      </if>
      <if test="intervalTime != null">
        interval_time,
      </if>
      <if test="jobName != null">
        job_name,
      </if>
      <if test="jobClassName != null">
        job_class_name,
      </if>
      <if test="jobDescription != null">
        job_description,
      </if>
      <if test="jobNumber != null">
        job_number,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="state != null">
        state,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="type != null">
        #{type,jdbcType=INTEGER},
      </if>
      <if test="cron != null">
        #{cron,jdbcType=VARCHAR},
      </if>
      <if test="intervalTime != null">
        #{intervalTime,jdbcType=INTEGER},
      </if>
      <if test="jobName != null">
        #{jobName,jdbcType=VARCHAR},
      </if>
      <if test="jobClassName != null">
        #{jobClassName,jdbcType=VARCHAR},
      </if>
      <if test="jobDescription != null">
        #{jobDescription,jdbcType=VARCHAR},
      </if>
      <if test="jobNumber != null">
        #{jobNumber,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        #{status,jdbcType=TINYINT},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=BIGINT},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=BIGINT},
      </if>
      <if test="state != null">
        #{state,jdbcType=TINYINT},
      </if>
    </trim>
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID() as id
    </selectKey>
  </insert>
  <select id="countByExample" parameterType="com.dmm.entry.TaskJobExample" resultType="java.lang.Long">
    select count(*) from task_job
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update task_job
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.type != null">
        type = #{record.type,jdbcType=INTEGER},
      </if>
      <if test="record.cron != null">
        cron = #{record.cron,jdbcType=VARCHAR},
      </if>
      <if test="record.intervalTime != null">
        interval_time = #{record.intervalTime,jdbcType=INTEGER},
      </if>
      <if test="record.jobName != null">
        job_name = #{record.jobName,jdbcType=VARCHAR},
      </if>
      <if test="record.jobClassName != null">
        job_class_name = #{record.jobClassName,jdbcType=VARCHAR},
      </if>
      <if test="record.jobDescription != null">
        job_description = #{record.jobDescription,jdbcType=VARCHAR},
      </if>
      <if test="record.jobNumber != null">
        job_number = #{record.jobNumber,jdbcType=VARCHAR},
      </if>
      <if test="record.status != null">
        status = #{record.status,jdbcType=TINYINT},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=BIGINT},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=BIGINT},
      </if>
      <if test="record.state != null">
        state = #{record.state,jdbcType=TINYINT},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update task_job
    set id = #{record.id,jdbcType=BIGINT},
      type = #{record.type,jdbcType=INTEGER},
      cron = #{record.cron,jdbcType=VARCHAR},
      interval_time = #{record.intervalTime,jdbcType=INTEGER},
      job_name = #{record.jobName,jdbcType=VARCHAR},
      job_class_name = #{record.jobClassName,jdbcType=VARCHAR},
      job_description = #{record.jobDescription,jdbcType=VARCHAR},
      job_number = #{record.jobNumber,jdbcType=VARCHAR},
      status = #{record.status,jdbcType=TINYINT},
      create_time = #{record.createTime,jdbcType=BIGINT},
      update_time = #{record.updateTime,jdbcType=BIGINT},
      state = #{record.state,jdbcType=TINYINT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.dmm.entry.TaskJob">
    update task_job
    <set>
      <if test="type != null">
        type = #{type,jdbcType=INTEGER},
      </if>
      <if test="cron != null">
        cron = #{cron,jdbcType=VARCHAR},
      </if>
      <if test="intervalTime != null">
        interval_time = #{intervalTime,jdbcType=INTEGER},
      </if>
      <if test="jobName != null">
        job_name = #{jobName,jdbcType=VARCHAR},
      </if>
      <if test="jobClassName != null">
        job_class_name = #{jobClassName,jdbcType=VARCHAR},
      </if>
      <if test="jobDescription != null">
        job_description = #{jobDescription,jdbcType=VARCHAR},
      </if>
      <if test="jobNumber != null">
        job_number = #{jobNumber,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=TINYINT},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=BIGINT},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=BIGINT},
      </if>
      <if test="state != null">
        state = #{state,jdbcType=TINYINT},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.dmm.entry.TaskJob">
    update task_job
    set type = #{type,jdbcType=INTEGER},
      cron = #{cron,jdbcType=VARCHAR},
      interval_time = #{intervalTime,jdbcType=INTEGER},
      job_name = #{jobName,jdbcType=VARCHAR},
      job_class_name = #{jobClassName,jdbcType=VARCHAR},
      job_description = #{jobDescription,jdbcType=VARCHAR},
      job_number = #{jobNumber,jdbcType=VARCHAR},
      status = #{status,jdbcType=TINYINT},
      create_time = #{createTime,jdbcType=BIGINT},
      update_time = #{updateTime,jdbcType=BIGINT},
      state = #{state,jdbcType=TINYINT}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>